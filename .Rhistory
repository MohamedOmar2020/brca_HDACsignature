table(Phenotype$Overall.Survival.Status)
summary(is.na(Phenotype$Progress.Free.Survival..Months.))
summary(is.na(Phenotype$Overall.Survival..Months.))
range(Expr_tcga)
## Clean working space
rm(list = ls())
library(survminer)
library(survival)
library(patchwork)
library(readxl)
#######################
# Goal: refine the initial 125 genes to 60 genes (ET60) based on survival in the Metabric dataset
################
# Load the METABRIC Expr_tcgaession and Pheno_tcgatype data
Expr_tcga <- read.delim("./Data/brca_tcga/data_mrna_seq_v2_rsem_zscores_ref_diploid_samples.txt")
Pheno_tcga <- read.delim("./Data/brca_tcga/data_clinical_patient.txt")
Pheno_tcga <- Pheno_tcga[-c(1:4), ]
#################
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET125 <- All$`ET-125`
## get the ET60 genes
ET60 <- All$`ET-60`
ET60 <- ET60[!is.na(ET60)]
###########################
## Annotation
head(rownames(Expr_tcga))
Expr_tcga <- Expr_tcga[!duplicated(Expr_tcga$Hugo_Symbol), ]
rownames(Expr_tcga) <- Expr_tcga$Hugo_Symbol
Expr_tcga$Hugo_Symbol <- NULL
Expr_tcga$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr_tcga)))
sel <- which(apply(Expr_tcga, 1, function(x) all(is.finite(x)) ))
Expr_tcga <- Expr_tcga[sel, ]
Expr_tcga <- Expr_tcga[!is.na(rownames(Expr_tcga)),]
dim(Expr_tcga)
range(Expr_tcga)
Expr_tcga <- log2(Expr_tcga + 6)
range(Expr_tcga)
## subset the Expr_tcgaession to ET125 genes
Expr_tcga <- Expr_tcga[rownames(Expr_tcga) %in% ET125, ]
## subset the Expr_tcgaession to ET125 genes
Expr_tcga <- Expr_tcga[rownames(Expr_tcga) %in% All$`ET-65`, ]
# fix the column names
colnames(Expr_tcga) <- gsub('\\.01', '', colnames(Expr_tcga))
View(Expr_tcga)
Pheno_tcga$X.Patient.Identifier <- gsub("\\-", "\\.", Pheno_tcga$X.Patient.Identifier)
rownames(Pheno_tcga) <- Pheno_tcga$X.Patient.Identifier
CommonSamples <- intersect(colnames(Expr_tcga), rownames(Pheno_tcga))
Pheno_tcga <- Pheno_tcga[CommonSamples, ]
Pheno_tcga$Progression.Free.Status <- gsub("\\:.+", "", Pheno_tcga$Progression.Free.Status)
Pheno_tcga$Overall.Survival.Status <- gsub("\\:.+", "", Pheno_tcga$Overall.Survival.Status)
all(rownames(Pheno_tcga) == colnames(Expr_tcga))
Expr_tcga <- as.matrix(Expr_tcga)
table(is.na(Expr_tcga))
############################################################
## Keep only the relevant information (Metastasis Event and Time)
#table(Pheno_tcga$Relapse.Free.Status)
#Pheno_tcga$Relapse.Free.Status <- gsub("\\:.+", "", Pheno_tcga$Relapse.Free.Status)
Pheno_tcga$Progression.Free.Status <- as.numeric(Pheno_tcga$Progression.Free.Status)
Pheno_tcga$Overall.Survival.Status <- as.numeric(Pheno_tcga$Overall.Survival.Status)
table(Pheno_tcga$Progression.Free.Status)
table(Pheno_tcga$Overall.Survival.Status)
Pheno_tcga$Progress.Free.Survival..Months. <- as.numeric(Pheno_tcga$Progress.Free.Survival..Months.)
Pheno_tcga$Overall.Survival..Months. <- as.numeric(Pheno_tcga$Overall.Survival..Months.)
Phenotype <- cbind(Pheno_tcga[, c("Progression.Free.Status", "Progress.Free.Survival..Months.", "Overall.Survival.Status", "Overall.Survival..Months.")])
# create a merged pdata and Z-scores object
CoxData <- data.frame(Phenotype, t(Expr_tcga))
ET121 <- rownames(Expr_tcga)
######
## categorize the Expr_tcgaession values into altered and non-altered
SurvData_Genes_cbioportal <- CoxData
## For the positive/Up genes
CutPoint_Genes <- surv_cutpoint(data = CoxData, time = "Overall.Survival..Months.", event = "Overall.Survival.Status", variables = ET121)
## subset the Expr_tcgaession to ET125 genes
Expr_tcga <- Expr_tcga[rownames(Expr_tcga) %in% All$`ET-60`, ]
################
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET125 <- All$`ET-125`
## get the ET60 genes
ET60 <- All$`ET-60`
ET60 <- ET60[!is.na(ET60)]
###########################
## Annotation
head(rownames(Expr_tcga))
Expr_tcga <- Expr_tcga[!duplicated(Expr_tcga$Hugo_Symbol), ]
rownames(Expr_tcga) <- Expr_tcga$Hugo_Symbol
Expr_tcga$Hugo_Symbol <- NULL
Expr_tcga$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr_tcga)))
sel <- which(apply(Expr_tcga, 1, function(x) all(is.finite(x)) ))
Expr_tcga <- Expr_tcga[sel, ]
Expr_tcga <- Expr_tcga[!is.na(rownames(Expr_tcga)),]
dim(Expr_tcga)
range(Expr_tcga)
Expr_tcga <- log2(Expr_tcga + 6)
## subset the Expr_tcgaession to ET125 genes
Expr_tcga <- Expr_tcga[rownames(Expr_tcga) %in% All$`ET-60`, ]
rm(list = ls())
library(survminer)
library(survival)
library(patchwork)
library(readxl)
#######################
# Goal: refine the initial 125 genes to 60 genes (ET60) based on survival in the Metabric dataset
################
# Load the METABRIC Expr_tcgaession and Pheno_tcgatype data
Expr_tcga <- read.delim("./Data/brca_tcga/data_mrna_seq_v2_rsem_zscores_ref_diploid_samples.txt")
Pheno_tcga <- read.delim("./Data/brca_tcga/data_clinical_patient.txt")
Pheno_tcga <- Pheno_tcga[-c(1:4), ]
#################
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET125 <- All$`ET-125`
## get the ET60 genes
ET60 <- All$`ET-60`
ET60 <- ET60[!is.na(ET60)]
###########################
## Annotation
head(rownames(Expr_tcga))
Expr_tcga <- Expr_tcga[!duplicated(Expr_tcga$Hugo_Symbol), ]
rownames(Expr_tcga) <- Expr_tcga$Hugo_Symbol
Expr_tcga$Hugo_Symbol <- NULL
Expr_tcga$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr_tcga)))
sel <- which(apply(Expr_tcga, 1, function(x) all(is.finite(x)) ))
Expr_tcga <- Expr_tcga[sel, ]
Expr_tcga <- Expr_tcga[!is.na(rownames(Expr_tcga)),]
dim(Expr_tcga)
range(Expr_tcga)
Expr_tcga <- log2(Expr_tcga + 6)
## subset the Expr_tcgaession to ET125 genes
Expr_tcga <- Expr_tcga[rownames(Expr_tcga) %in% All$`ET-60`, ]
# fix the column names
colnames(Expr_tcga) <- gsub('\\.01', '', colnames(Expr_tcga))
Pheno_tcga$X.Patient.Identifier <- gsub("\\-", "\\.", Pheno_tcga$X.Patient.Identifier)
rownames(Pheno_tcga) <- Pheno_tcga$X.Patient.Identifier
CommonSamples <- intersect(colnames(Expr_tcga), rownames(Pheno_tcga))
Pheno_tcga <- Pheno_tcga[CommonSamples, ]
Pheno_tcga$Progression.Free.Status <- gsub("\\:.+", "", Pheno_tcga$Progression.Free.Status)
Pheno_tcga$Overall.Survival.Status <- gsub("\\:.+", "", Pheno_tcga$Overall.Survival.Status)
all(rownames(Pheno_tcga) == colnames(Expr_tcga))
Expr_tcga <- as.matrix(Expr_tcga)
table(is.na(Expr_tcga))
############################################################
## Keep only the relevant information (Metastasis Event and Time)
#table(Pheno_tcga$Relapse.Free.Status)
#Pheno_tcga$Relapse.Free.Status <- gsub("\\:.+", "", Pheno_tcga$Relapse.Free.Status)
Pheno_tcga$Progression.Free.Status <- as.numeric(Pheno_tcga$Progression.Free.Status)
Pheno_tcga$Overall.Survival.Status <- as.numeric(Pheno_tcga$Overall.Survival.Status)
table(Pheno_tcga$Progression.Free.Status)
table(Pheno_tcga$Overall.Survival.Status)
Pheno_tcga$Progress.Free.Survival..Months. <- as.numeric(Pheno_tcga$Progress.Free.Survival..Months.)
Pheno_tcga$Overall.Survival..Months. <- as.numeric(Pheno_tcga$Overall.Survival..Months.)
Phenotype <- cbind(Pheno_tcga[, c("Progression.Free.Status", "Progress.Free.Survival..Months.", "Overall.Survival.Status", "Overall.Survival..Months.")])
# create a merged pdata and Z-scores object
CoxData <- data.frame(Phenotype, t(Expr_tcga))
#####################################
ET121 <- rownames(Expr_tcga)
######
## categorize the Expr_tcgaession values into altered and non-altered
SurvData_Genes_cbioportal <- CoxData
for (i in ET121){
SurvData_Genes_cbioportal[, i] <- ifelse(SurvData_Genes_cbioportal[, i] >= -2 & SurvData_Genes_cbioportal[, i] <= 2, 'non-altered', 'altered')
}
## For the positive/Up genes
CutPoint_Genes <- surv_cutpoint(data = CoxData, time = "Overall.Survival..Months.", event = "Overall.Survival.Status", variables = ET121)
CutPoint_Genes
x <- All$`ET-65`[!(All$`ET-65` %in% All$`ET-60`)]
(All$`ET-65` %in% All$`ET-60`)
!(All$`ET-65` %in% All$`ET-60`)
View(All)
SurvData_Genes <- surv_categorize(CutPoint_Genes)
########################################################################
## Fit genes
ET60_list <- as.list(colnames(SurvData_Genes)[-c(1,2)])
surv_func <- function(x){
f <- as.formula(paste("Surv(Overall.Survival..Months., Overall.Survival.Status) ~", x))
return(surv_fit(f, data = SurvData_Genes))
}
ET60_fit_list <- lapply(ET60_list, surv_func)
names(ET60_fit_list) <- ET60
ET60 <- rownames(Expr_tcga)
######
## categorize the Expr_tcgaession values into altered and non-altered
SurvData_Genes_cbioportal <- CoxData
for (i in ET60){
SurvData_Genes_cbioportal[, i] <- ifelse(SurvData_Genes_cbioportal[, i] >= -2 & SurvData_Genes_cbioportal[, i] <= 2, 'non-altered', 'altered')
}
## For the positive/Up genes
CutPoint_Genes <- surv_cutpoint(data = CoxData, time = "Overall.Survival..Months.", event = "Overall.Survival.Status", variables = ET60)
CutPoint_Genes
SurvData_Genes <- surv_categorize(CutPoint_Genes)
########################################################################
## Fit genes
ET60_list <- as.list(colnames(SurvData_Genes)[-c(1,2)])
surv_func <- function(x){
f <- as.formula(paste("Surv(Overall.Survival..Months., Overall.Survival.Status) ~", x))
return(surv_fit(f, data = SurvData_Genes))
}
ET60_fit_list <- lapply(ET60_list, surv_func)
names(ET60_fit_list) <- ET60
Pval_list <- surv_pvalue(ET60_fit_list)
Pval_df <- do.call(rbind.data.frame, Pval_list)
Pval_df_fil <- Pval_df[Pval_df$pval < 0.05, ]
CommGenes_ET60 <- intersect(Pval_df_fil$variable, ET60)
CommGenes_ET9 <- intersect(Pval_df_fil$variable, All$`ET-9`)
# save the results
write.csv(Pval_df_fil, 'objs/TCGA_OS_sig.csv')
CommGenes_ET9
## For the positive/Up genes
CutPoint_Genes <- surv_cutpoint(data = CoxData, time = "Progress.Free.Survival..Months.", event = "Progression.Free.Status", variables = ET60)
CutPoint_Genes
SurvData_Genes <- surv_categorize(CutPoint_Genes)
########################################################################
## Fit genes
ET60_list <- as.list(colnames(SurvData_Genes)[-c(1,2)])
surv_func <- function(x){
f <- as.formula(paste("Surv(Progress.Free.Survival..Months., Progression.Free.Status) ~", x))
return(surv_fit(f, data = SurvData_Genes))
}
ET60_fit_list <- lapply(ET60_list, surv_func)
names(ET60_fit_list) <- ET60
Pval_list <- surv_pvalue(ET60_fit_list)
Pval_df <- do.call(rbind.data.frame, Pval_list)
Pval_df_fil <- Pval_df[Pval_df$pval < 0.05, ]
## Clean working space
rm(list = ls())
library(survminer)
library(survival)
library(patchwork)
library(readxl)
#######################
# Goal: refine the initial 125 genes to 60 genes (ET60) based on survival in the Metabric dataset
################
# Load the METABRIC Expr_tcgaession and Pheno_tcgatype data
Expr_tcga <- read.delim("./Data/brca_tcga/data_mrna_seq_v2_rsem_zscores_ref_diploid_samples.txt")
Pheno_tcga <- read.delim("./Data/brca_tcga/data_clinical_patient.txt")
Pheno_tcga <- Pheno_tcga[-c(1:4), ]
#################
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET125 <- All$`ET-125`
## get the ET60 genes
ET60 <- All$`ET-60`
ET60 <- ET60[!is.na(ET60)]
x <- All$`ET-65`[!(All$`ET-65` %in% All$`ET-60`)]
###########################
## Annotation
head(rownames(Expr_tcga))
Expr_tcga <- Expr_tcga[!duplicated(Expr_tcga$Hugo_Symbol), ]
rownames(Expr_tcga) <- Expr_tcga$Hugo_Symbol
Expr_tcga$Hugo_Symbol <- NULL
Expr_tcga$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr_tcga)))
sel <- which(apply(Expr_tcga, 1, function(x) all(is.finite(x)) ))
Expr_tcga <- Expr_tcga[sel, ]
Expr_tcga <- Expr_tcga[!is.na(rownames(Expr_tcga)),]
dim(Expr_tcga)
range(Expr_tcga)
Expr_tcga <- log2(Expr_tcga + 6)
## subset the Expr_tcgaession to ET125 genes
Expr_tcga <- Expr_tcga[rownames(Expr_tcga) %in% All$`ET-60`, ]
# fix the column names
colnames(Expr_tcga) <- gsub('\\.01', '', colnames(Expr_tcga))
####################################
### Modify the Pheno_tcgatype
Pheno_tcga$X.Patient.Identifier <- gsub("\\-", "\\.", Pheno_tcga$X.Patient.Identifier)
rownames(Pheno_tcga) <- Pheno_tcga$X.Patient.Identifier
CommonSamples <- intersect(colnames(Expr_tcga), rownames(Pheno_tcga))
Pheno_tcga <- Pheno_tcga[CommonSamples, ]
Pheno_tcga$Progression.Free.Status <- gsub("\\:.+", "", Pheno_tcga$Progression.Free.Status)
Pheno_tcga$Overall.Survival.Status <- gsub("\\:.+", "", Pheno_tcga$Overall.Survival.Status)
all(rownames(Pheno_tcga) == colnames(Expr_tcga))
Expr_tcga <- as.matrix(Expr_tcga)
table(is.na(Expr_tcga))
############################################################
## Keep only the relevant information (Metastasis Event and Time)
#table(Pheno_tcga$Relapse.Free.Status)
#Pheno_tcga$Relapse.Free.Status <- gsub("\\:.+", "", Pheno_tcga$Relapse.Free.Status)
Pheno_tcga$Progression.Free.Status <- as.numeric(Pheno_tcga$Progression.Free.Status)
Pheno_tcga$Overall.Survival.Status <- as.numeric(Pheno_tcga$Overall.Survival.Status)
table(Pheno_tcga$Progression.Free.Status)
table(Pheno_tcga$Overall.Survival.Status)
Pheno_tcga$Progress.Free.Survival..Months. <- as.numeric(Pheno_tcga$Progress.Free.Survival..Months.)
Pheno_tcga$Overall.Survival..Months. <- as.numeric(Pheno_tcga$Overall.Survival..Months.)
Phenotype <- cbind(Pheno_tcga[, c("Progression.Free.Status", "Progress.Free.Survival..Months.", "Overall.Survival.Status", "Overall.Survival..Months.")])
# create a merged
# create a merged pdata and Z-scores object
CoxData <- data.frame(Phenotype, t(Expr_tcga))
ET60 <- rownames(Expr_tcga)
######
## categorize the Expr_tcgaession values into altered and non-altered
SurvData_Genes_cbioportal <- CoxData
for (i in ET60){
SurvData_Genes_cbioportal[, i] <- ifelse(SurvData_Genes_cbioportal[, i] >= -2 & SurvData_Genes_cbioportal[, i] <= 2, 'non-altered', 'altered')
}
## For the positive/Up genes
CutPoint_Genes <- surv_cutpoint(data = CoxData, time = "Progress.Free.Survival..Months.", event = "Progression.Free.Status", variables = ET60)
CutPoint_Genes
SurvData_Genes <- surv_categorize(CutPoint_Genes)
########################################################################
## Fit genes
ET60_list <- as.list(colnames(SurvData_Genes)[-c(1,2)])
surv_func <- function(x){
f <- as.formula(paste("Surv(Progress.Free.Survival..Months., Progression.Free.Status) ~", x))
return(surv_fit(f, data = SurvData_Genes))
}
ET60_fit_list <- lapply(ET60_list, surv_func)
names(ET60_fit_list) <- ET60
Pval_list <- surv_pvalue(ET60_fit_list)
Pval_df <- do.call(rbind.data.frame, Pval_list)
Pval_df_fil <- Pval_df[Pval_df$pval < 0.05, ]
# save the results
write.csv(Pval_df_fil, 'objs/TCGA_PFS_sig.csv')
CommGenes_ET60 <- intersect(Pval_df_fil$variable, ET60)
CommGenes_ET9 <- intersect(Pval_df_fil$variable, All$`ET-9`)
CommGenes_ET9
res_list_10yrs <- lapply(ET60_fit_list, summary, times = 120)
?summary.survfit
res_list_10yrs <- lapply(ET60_fit_list, summary, times = 120, extend = TRUE)
res_list_10yrs_pval <- lapply(res_list_10yrs, function(x){
diffSE <- sqrt(x$std.err[2]^2 + x$std.err[1]^2)
#a z-test test statistic is
zStat <- (x$surv[1] - x$surv[2])/diffSE
p <- 2*pnorm(abs(zStat), lower.tail=FALSE)
p
})
Pval_10yrs_df <- as.data.frame(do.call(rbind, res_list_10yrs_pval))
Pval_10yrs_df$variable <- rownames(Pval_10yrs_df)
colnames(Pval_10yrs_df) <- c('pval', 'variable')
Pval_10yrs_df_fil <- Pval_10yrs_df[Pval_10yrs_df$pval < 0.05, ]
write.csv(Pval_10yrs_df_fil, 'objs/TCGA_10yrsPFS_sig.csv')
CommGenes_10yrs_ET60 <- intersect(Pval_10yrs_df_fil$variable, ET60)
CommGenes_10yrs_ET9 <- intersect(Pval_10yrs_df_fil$variable, All$`ET-9`)
CommGenes_10yrs_ET60
CommGenes_10yrs_ET9
## Clean working space
rm(list = ls())
library(survminer)
library(survival)
library(patchwork)
library(readxl)
#######################
# Goal: refine the initial 125 genes to 60 genes (ET60) based on survival in the Metabric dataset
################
# Load the METABRIC expression and phenotype data
Expr <- read.delim("./Data/brca_metabric_cbioportal/data_mrna_agilent_microarray_zscores_ref_diploid_samples.txt")
Pheno <- read.delim("./Data/brca_metabric_cbioportal/brca_metabric_clinical_data.tsv")
#################
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET125 <- All$`ET-125`
## get the ET60 genes
ET60 <- All$`ET-60`
ET60 <- ET60[!is.na(ET60)]
###########################
## Annotation
head(rownames(Expr))
Expr <- Expr[!duplicated(Expr$Hugo_Symbol), ]
rownames(Expr) <- Expr$Hugo_Symbol
Expr$Hugo_Symbol <- NULL
Expr$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr)))
sel <- which(apply(Expr, 1, function(x) all(is.finite(x)) ))
Expr <- Expr[sel, ]
Expr <- Expr[!is.na(rownames(Expr)),]
dim(Expr)
range(Expr)
x <- intersect(ET60, rownames(Expr))
#Expr <- t(scale(t(Expr), center = TRUE, scale = TRUE))
## subset the expression to ET125 genes
Expr <- Expr[rownames(Expr) %in% ET125, ]
# filter
Pheno$Overall.Survival..Months. <- as.numeric(Pheno$Overall.Survival..Months.)
Pheno <- Pheno[Pheno$Overall.Survival..Months. <=120, ]
Pheno$Sample.ID <- gsub("\\-", "\\.", Pheno$Sample.ID)
rownames(Pheno) <- Pheno$Sample.ID
View(Pheno)
## Clean working space
rm(list = ls())
library(survminer)
library(survival)
library(patchwork)
library(readxl)
#######################
# Goal: refine the initial 125 genes to 60 genes (ET60) based on survival in the Metabric dataset
################
# Load the METABRIC expression and phenotype data
Expr <- read.delim("./Data/brca_metabric_cbioportal/data_mrna_agilent_microarray_zscores_ref_diploid_samples.txt")
Pheno <- read.delim("./Data/brca_metabric_cbioportal/brca_metabric_clinical_data.tsv")
#################
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET125 <- All$`ET-125`
## get the ET60 genes
ET60 <- All$`ET-60`
ET60 <- ET60[!is.na(ET60)]
###########################
## Annotation
head(rownames(Expr))
Expr <- Expr[!duplicated(Expr$Hugo_Symbol), ]
rownames(Expr) <- Expr$Hugo_Symbol
Expr$Hugo_Symbol <- NULL
Expr$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr)))
sel <- which(apply(Expr, 1, function(x) all(is.finite(x)) ))
Expr <- Expr[sel, ]
Expr <- Expr[!is.na(rownames(Expr)),]
dim(Expr)
range(Expr)
x <- intersect(ET60, rownames(Expr))
#Expr <- t(scale(t(Expr), center = TRUE, scale = TRUE))
## subset the expression to ET125 genes
Expr <- Expr[rownames(Expr) %in% ET125, ]
#`%!in%` <- Negate(`%in%`)
#missingET60 <- ET60[ET60 %!in% rownames(Expr)]
####################################
### Modify the phenotype
# filter
Pheno$Overall.Survival..Months. <- as.numeric(Pheno$Overall.Survival..Months.)
Pheno <- Pheno[Pheno$Overall.Survival..Months. <= 120, ]
View(Pheno)
Pheno <- Pheno[!(is.na(Pheno$Overall.Survival..Months.)), ]
View(Pheno)
Pheno$Sample.ID <- gsub("\\-", "\\.", Pheno$Sample.ID)
rownames(Pheno) <- Pheno$Sample.ID
CommonSamples <- intersect(colnames(Expr), rownames(Pheno))
Pheno <- Pheno[CommonSamples, ]
Pheno$Relapse.Free.Status <- gsub("\\:.+", "", Pheno$Relapse.Free.Status)
Pheno$Overall.Survival.Status <- gsub("\\:.+", "", Pheno$Overall.Survival.Status)
all(rownames(Pheno) == colnames(Expr))
Expr <- Expr[, CommonSamples]
Pheno$Relapse.Free.Status <- gsub("\\:.+", "", Pheno$Relapse.Free.Status)
Pheno$Overall.Survival.Status <- gsub("\\:.+", "", Pheno$Overall.Survival.Status)
all(rownames(Pheno) == colnames(Expr))
Expr <- as.matrix(Expr)
Pheno$Relapse.Free.Status <- as.numeric(Pheno$Relapse.Free.Status)
Pheno$Overall.Survival.Status <- as.numeric(Pheno$Overall.Survival.Status)
table(Pheno$Relapse.Free.Status)
table(Pheno$Overall.Survival.Status)
Pheno$Relapse.Free.Status..Months. <- as.numeric(Pheno$Relapse.Free.Status..Months.)
Pheno$Overall.Survival..Months. <- as.numeric(Pheno$Overall.Survival..Months.)
Phenotype <- cbind(Pheno[, c("Relapse.Free.Status", "Relapse.Free.Status..Months.", "Overall.Survival.Status", "Overall.Survival..Months.")])
# create a merged pdata and Z-scores object
CoxData <- data.frame(Phenotype, t(Expr))
ET115 <- rownames(Expr)
######
## categorize the expression values into altered and non-altered
SurvData_Genes_cbioportal <- CoxData
## For the positive/Up genes
CutPoint_Genes <- surv_cutpoint(data = CoxData, time = "Overall.Survival..Months.", event = "Overall.Survival.Status", variables = ET115)
CutPoint_Genes
SurvData_Genes <- surv_categorize(CutPoint_Genes)
########################################################################
## Fit genes: Kaplan Mier logrank
ET115_list <- as.list(ET115)
surv_func <- function(x){
f <- as.formula(paste("Surv(Overall.Survival..Months., Overall.Survival.Status) ~", x))
return(surv_fit(f, data = SurvData_Genes))
}
ET115_fit_list <- lapply(ET115_list, surv_func)
names(ET115_fit_list) <- ET115
Pval_list <- surv_pvalue(ET115_fit_list)
Pval_df <- do.call(rbind.data.frame, Pval_list)
Pval_df_fil <- Pval_df[Pval_df$pval < 0.05, ]
CommGenes_ET60 <- intersect(Pval_df_fil$variable, ET60)
# save the results
write.csv(Pval_df_fil, 'objs/MetaBric_upTo10yrsOS_sig.csv')
CommGenes_ET60
CommGenes_ET9 <- intersect(Pval_df_fil$variable, All$`ET-9`)
CommGenes_ET9
## Clean working space
rm(list = ls())
library(survminer)
library(survival)
library(patchwork)
library(readxl)
#######################
# Goal: refine the initial 125 genes to 60 genes (ET60) based on survival in the Metabric dataset
################
# Load the METABRIC expression and phenotype data
Expr <- read.delim("./Data/brca_metabric_cbioportal/data_mrna_agilent_microarray_zscores_ref_diploid_samples.txt")
Pheno <- read.delim("./Data/brca_metabric_cbioportal/brca_metabric_clinical_data.tsv")
#################
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET125 <- All$`ET-125`
ET125
###########################
## Annotation
head(rownames(Expr))
Expr <- Expr[!duplicated(Expr$Hugo_Symbol), ]
rownames(Expr) <- Expr$Hugo_Symbol
Expr$Hugo_Symbol <- NULL
Expr$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr)))
sel <- which(apply(Expr, 1, function(x) all(is.finite(x)) ))
Expr <- Expr[sel, ]
Expr <- Expr[!is.na(rownames(Expr)),]
dim(Expr)
range(Expr)
x <- intersect(ET60, rownames(Expr))
#Expr <- t(scale(t(Expr), center = TRUE, scale = TRUE))
## subset the expression to ET125 genes
Expr <- Expr[rownames(Expr) %in% ET125, ]
x <- intersect(ET125, rownames(Expr))
x
`%!in%` <- Negate(`%in%`)
missingET125<- ET125[ET125 %!in% rownames(Expr)]
missingET125

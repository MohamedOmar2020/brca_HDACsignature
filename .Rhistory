Expr_tcga <- read.delim("./Data/brca_tcga/data_mrna_seq_v2_rsem_zscores_ref_diploid_samples.txt")
Pheno_tcga <- read.delim("./Data/brca_tcga/data_clinical_patient.txt")
Pheno_tcga <- Pheno_tcga[-c(1:4), ]
#################
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET125 <- All$`ET-125`
## get the ET60 genes
ET60 <- All$`ET-60`
ET60 <- ET60[!is.na(ET60)]
x <- All$`ET-65`[!(All$`ET-65` %in% All$`ET-60`)]
###########################
## Annotation
head(rownames(Expr_tcga))
Expr_tcga <- Expr_tcga[!duplicated(Expr_tcga$Hugo_Symbol), ]
rownames(Expr_tcga) <- Expr_tcga$Hugo_Symbol
Expr_tcga$Hugo_Symbol <- NULL
Expr_tcga$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr_tcga)))
sel <- which(apply(Expr_tcga, 1, function(x) all(is.finite(x)) ))
Expr_tcga <- Expr_tcga[sel, ]
Expr_tcga <- Expr_tcga[!is.na(rownames(Expr_tcga)),]
dim(Expr_tcga)
range(Expr_tcga)
Expr_tcga <- log2(Expr_tcga + 6)
## subset the Expr_tcgaession to ET125 genes
Expr_tcga <- Expr_tcga[rownames(Expr_tcga) %in% All$`ET-60`, ]
# fix the column names
colnames(Expr_tcga) <- gsub('\\.01', '', colnames(Expr_tcga))
####################################
### Modify the Pheno_tcgatype
Pheno_tcga$X.Patient.Identifier <- gsub("\\-", "\\.", Pheno_tcga$X.Patient.Identifier)
rownames(Pheno_tcga) <- Pheno_tcga$X.Patient.Identifier
CommonSamples <- intersect(colnames(Expr_tcga), rownames(Pheno_tcga))
Pheno_tcga <- Pheno_tcga[CommonSamples, ]
Pheno_tcga$Progression.Free.Status <- gsub("\\:.+", "", Pheno_tcga$Progression.Free.Status)
Pheno_tcga$Overall.Survival.Status <- gsub("\\:.+", "", Pheno_tcga$Overall.Survival.Status)
all(rownames(Pheno_tcga) == colnames(Expr_tcga))
Expr_tcga <- as.matrix(Expr_tcga)
table(is.na(Expr_tcga))
############################################################
## Keep only the relevant information (Metastasis Event and Time)
#table(Pheno_tcga$Relapse.Free.Status)
#Pheno_tcga$Relapse.Free.Status <- gsub("\\:.+", "", Pheno_tcga$Relapse.Free.Status)
Pheno_tcga$Progression.Free.Status <- as.numeric(Pheno_tcga$Progression.Free.Status)
Pheno_tcga$Overall.Survival.Status <- as.numeric(Pheno_tcga$Overall.Survival.Status)
table(Pheno_tcga$Progression.Free.Status)
table(Pheno_tcga$Overall.Survival.Status)
Pheno_tcga$Progress.Free.Survival..Months. <- as.numeric(Pheno_tcga$Progress.Free.Survival..Months.)
Pheno_tcga$Overall.Survival..Months. <- as.numeric(Pheno_tcga$Overall.Survival..Months.)
Phenotype <- cbind(Pheno_tcga[, c("Progression.Free.Status", "Progress.Free.Survival..Months.", "Overall.Survival.Status", "Overall.Survival..Months.")])
# create a merged
# create a merged pdata and Z-scores object
CoxData <- data.frame(Phenotype, t(Expr_tcga))
ET60 <- rownames(Expr_tcga)
######
## categorize the Expr_tcgaession values into altered and non-altered
SurvData_Genes_cbioportal <- CoxData
for (i in ET60){
SurvData_Genes_cbioportal[, i] <- ifelse(SurvData_Genes_cbioportal[, i] >= -2 & SurvData_Genes_cbioportal[, i] <= 2, 'non-altered', 'altered')
}
## For the positive/Up genes
CutPoint_Genes <- surv_cutpoint(data = CoxData, time = "Progress.Free.Survival..Months.", event = "Progression.Free.Status", variables = ET60)
CutPoint_Genes
SurvData_Genes <- surv_categorize(CutPoint_Genes)
########################################################################
## Fit genes
ET60_list <- as.list(colnames(SurvData_Genes)[-c(1,2)])
surv_func <- function(x){
f <- as.formula(paste("Surv(Progress.Free.Survival..Months., Progression.Free.Status) ~", x))
return(surv_fit(f, data = SurvData_Genes))
}
ET60_fit_list <- lapply(ET60_list, surv_func)
names(ET60_fit_list) <- ET60
Pval_list <- surv_pvalue(ET60_fit_list)
Pval_df <- do.call(rbind.data.frame, Pval_list)
Pval_df_fil <- Pval_df[Pval_df$pval < 0.05, ]
# save the results
write.csv(Pval_df_fil, 'objs/TCGA_PFS_sig.csv')
CommGenes_ET60 <- intersect(Pval_df_fil$variable, ET60)
CommGenes_ET9 <- intersect(Pval_df_fil$variable, All$`ET-9`)
CommGenes_ET9
res_list_10yrs <- lapply(ET60_fit_list, summary, times = 120)
?summary.survfit
res_list_10yrs <- lapply(ET60_fit_list, summary, times = 120, extend = TRUE)
res_list_10yrs_pval <- lapply(res_list_10yrs, function(x){
diffSE <- sqrt(x$std.err[2]^2 + x$std.err[1]^2)
#a z-test test statistic is
zStat <- (x$surv[1] - x$surv[2])/diffSE
p <- 2*pnorm(abs(zStat), lower.tail=FALSE)
p
})
Pval_10yrs_df <- as.data.frame(do.call(rbind, res_list_10yrs_pval))
Pval_10yrs_df$variable <- rownames(Pval_10yrs_df)
colnames(Pval_10yrs_df) <- c('pval', 'variable')
Pval_10yrs_df_fil <- Pval_10yrs_df[Pval_10yrs_df$pval < 0.05, ]
write.csv(Pval_10yrs_df_fil, 'objs/TCGA_10yrsPFS_sig.csv')
CommGenes_10yrs_ET60 <- intersect(Pval_10yrs_df_fil$variable, ET60)
CommGenes_10yrs_ET9 <- intersect(Pval_10yrs_df_fil$variable, All$`ET-9`)
CommGenes_10yrs_ET60
CommGenes_10yrs_ET9
## Clean working space
rm(list = ls())
library(survminer)
library(survival)
library(patchwork)
library(readxl)
#######################
# Goal: refine the initial 125 genes to 60 genes (ET60) based on survival in the Metabric dataset
################
# Load the METABRIC expression and phenotype data
Expr <- read.delim("./Data/brca_metabric_cbioportal/data_mrna_agilent_microarray_zscores_ref_diploid_samples.txt")
Pheno <- read.delim("./Data/brca_metabric_cbioportal/brca_metabric_clinical_data.tsv")
#################
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET125 <- All$`ET-125`
## get the ET60 genes
ET60 <- All$`ET-60`
ET60 <- ET60[!is.na(ET60)]
###########################
## Annotation
head(rownames(Expr))
Expr <- Expr[!duplicated(Expr$Hugo_Symbol), ]
rownames(Expr) <- Expr$Hugo_Symbol
Expr$Hugo_Symbol <- NULL
Expr$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr)))
sel <- which(apply(Expr, 1, function(x) all(is.finite(x)) ))
Expr <- Expr[sel, ]
Expr <- Expr[!is.na(rownames(Expr)),]
dim(Expr)
range(Expr)
x <- intersect(ET60, rownames(Expr))
#Expr <- t(scale(t(Expr), center = TRUE, scale = TRUE))
## subset the expression to ET125 genes
Expr <- Expr[rownames(Expr) %in% ET125, ]
# filter
Pheno$Overall.Survival..Months. <- as.numeric(Pheno$Overall.Survival..Months.)
Pheno <- Pheno[Pheno$Overall.Survival..Months. <=120, ]
Pheno$Sample.ID <- gsub("\\-", "\\.", Pheno$Sample.ID)
rownames(Pheno) <- Pheno$Sample.ID
View(Pheno)
## Clean working space
rm(list = ls())
library(survminer)
library(survival)
library(patchwork)
library(readxl)
#######################
# Goal: refine the initial 125 genes to 60 genes (ET60) based on survival in the Metabric dataset
################
# Load the METABRIC expression and phenotype data
Expr <- read.delim("./Data/brca_metabric_cbioportal/data_mrna_agilent_microarray_zscores_ref_diploid_samples.txt")
Pheno <- read.delim("./Data/brca_metabric_cbioportal/brca_metabric_clinical_data.tsv")
#################
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET125 <- All$`ET-125`
## get the ET60 genes
ET60 <- All$`ET-60`
ET60 <- ET60[!is.na(ET60)]
###########################
## Annotation
head(rownames(Expr))
Expr <- Expr[!duplicated(Expr$Hugo_Symbol), ]
rownames(Expr) <- Expr$Hugo_Symbol
Expr$Hugo_Symbol <- NULL
Expr$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr)))
sel <- which(apply(Expr, 1, function(x) all(is.finite(x)) ))
Expr <- Expr[sel, ]
Expr <- Expr[!is.na(rownames(Expr)),]
dim(Expr)
range(Expr)
x <- intersect(ET60, rownames(Expr))
#Expr <- t(scale(t(Expr), center = TRUE, scale = TRUE))
## subset the expression to ET125 genes
Expr <- Expr[rownames(Expr) %in% ET125, ]
#`%!in%` <- Negate(`%in%`)
#missingET60 <- ET60[ET60 %!in% rownames(Expr)]
####################################
### Modify the phenotype
# filter
Pheno$Overall.Survival..Months. <- as.numeric(Pheno$Overall.Survival..Months.)
Pheno <- Pheno[Pheno$Overall.Survival..Months. <= 120, ]
View(Pheno)
Pheno <- Pheno[!(is.na(Pheno$Overall.Survival..Months.)), ]
View(Pheno)
Pheno$Sample.ID <- gsub("\\-", "\\.", Pheno$Sample.ID)
rownames(Pheno) <- Pheno$Sample.ID
CommonSamples <- intersect(colnames(Expr), rownames(Pheno))
Pheno <- Pheno[CommonSamples, ]
Pheno$Relapse.Free.Status <- gsub("\\:.+", "", Pheno$Relapse.Free.Status)
Pheno$Overall.Survival.Status <- gsub("\\:.+", "", Pheno$Overall.Survival.Status)
all(rownames(Pheno) == colnames(Expr))
Expr <- Expr[, CommonSamples]
Pheno$Relapse.Free.Status <- gsub("\\:.+", "", Pheno$Relapse.Free.Status)
Pheno$Overall.Survival.Status <- gsub("\\:.+", "", Pheno$Overall.Survival.Status)
all(rownames(Pheno) == colnames(Expr))
Expr <- as.matrix(Expr)
Pheno$Relapse.Free.Status <- as.numeric(Pheno$Relapse.Free.Status)
Pheno$Overall.Survival.Status <- as.numeric(Pheno$Overall.Survival.Status)
table(Pheno$Relapse.Free.Status)
table(Pheno$Overall.Survival.Status)
Pheno$Relapse.Free.Status..Months. <- as.numeric(Pheno$Relapse.Free.Status..Months.)
Pheno$Overall.Survival..Months. <- as.numeric(Pheno$Overall.Survival..Months.)
Phenotype <- cbind(Pheno[, c("Relapse.Free.Status", "Relapse.Free.Status..Months.", "Overall.Survival.Status", "Overall.Survival..Months.")])
# create a merged pdata and Z-scores object
CoxData <- data.frame(Phenotype, t(Expr))
ET115 <- rownames(Expr)
######
## categorize the expression values into altered and non-altered
SurvData_Genes_cbioportal <- CoxData
## For the positive/Up genes
CutPoint_Genes <- surv_cutpoint(data = CoxData, time = "Overall.Survival..Months.", event = "Overall.Survival.Status", variables = ET115)
CutPoint_Genes
SurvData_Genes <- surv_categorize(CutPoint_Genes)
########################################################################
## Fit genes: Kaplan Mier logrank
ET115_list <- as.list(ET115)
surv_func <- function(x){
f <- as.formula(paste("Surv(Overall.Survival..Months., Overall.Survival.Status) ~", x))
return(surv_fit(f, data = SurvData_Genes))
}
ET115_fit_list <- lapply(ET115_list, surv_func)
names(ET115_fit_list) <- ET115
Pval_list <- surv_pvalue(ET115_fit_list)
Pval_df <- do.call(rbind.data.frame, Pval_list)
Pval_df_fil <- Pval_df[Pval_df$pval < 0.05, ]
CommGenes_ET60 <- intersect(Pval_df_fil$variable, ET60)
# save the results
write.csv(Pval_df_fil, 'objs/MetaBric_upTo10yrsOS_sig.csv')
CommGenes_ET60
CommGenes_ET9 <- intersect(Pval_df_fil$variable, All$`ET-9`)
CommGenes_ET9
## Clean working space
rm(list = ls())
library(survminer)
library(survival)
library(patchwork)
library(readxl)
#######################
# Goal: refine the initial 125 genes to 60 genes (ET60) based on survival in the Metabric dataset
################
# Load the METABRIC expression and phenotype data
Expr <- read.delim("./Data/brca_metabric_cbioportal/data_mrna_agilent_microarray_zscores_ref_diploid_samples.txt")
Pheno <- read.delim("./Data/brca_metabric_cbioportal/brca_metabric_clinical_data.tsv")
#################
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET125 <- All$`ET-125`
ET125
###########################
## Annotation
head(rownames(Expr))
Expr <- Expr[!duplicated(Expr$Hugo_Symbol), ]
rownames(Expr) <- Expr$Hugo_Symbol
Expr$Hugo_Symbol <- NULL
Expr$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr)))
sel <- which(apply(Expr, 1, function(x) all(is.finite(x)) ))
Expr <- Expr[sel, ]
Expr <- Expr[!is.na(rownames(Expr)),]
dim(Expr)
range(Expr)
x <- intersect(ET60, rownames(Expr))
#Expr <- t(scale(t(Expr), center = TRUE, scale = TRUE))
## subset the expression to ET125 genes
Expr <- Expr[rownames(Expr) %in% ET125, ]
x <- intersect(ET125, rownames(Expr))
x
`%!in%` <- Negate(`%in%`)
missingET125<- ET125[ET125 %!in% rownames(Expr)]
missingET125
######
# Clean Work space
rm(list = ls())
############################################################################
### Load library
require(switchBox)
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
library(mltools)
library(xtable)
library(readxl)
library(survminer)
library(survival)
#################
load("./objs/ET_metabric.rda")
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
# ET60 <- All$`ET-60`
#
# ET60[ET60=='GPR56'] <- 'ADGRG1'
# ET60[ET60=='FAM116B'] <- 'DENND6B'
# #ET125[ET125=='FAM46B'] <- 'TENT5B'
# ET60[ET60=='HSA011916'] <- 'CTDNEP1'
# ET60 <- ET60[!is.na(ET60)]
myTSPs <- t(combn(All$`ET-125`, 2))
colnames(myTSPs) <- c("gene1", "gene2")
################
# Load the  expression and pheno data
load('./objs/forKTSP.rda')
###################################
### Common genes
keepGns_datasets <- intersect(rownames(Expr_tcga), rownames(Expr_metabric))
keepGns_tsp <- intersect(as.vector(myTSPs), keepGns_datasets)
Expr_metabric <- Expr_metabric[keepGns_tsp, ]
Expr_tcga <- Expr_tcga[keepGns_tsp, ]
### For the TSP
myTSPs <- myTSPs[myTSPs[,1] %in% keepGns_tsp & myTSPs[,2] %in% keepGns_tsp , ]
######
# Clean Work space
rm(list = ls())
############################################################################
### Load library
require(switchBox)
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
library(mltools)
library(xtable)
library(readxl)
library(survminer)
library(survival)
#################
load("./objs/ET_metabric.rda")
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
# ET60 <- All$`ET-60`
#
# ET60[ET60=='GPR56'] <- 'ADGRG1'
# ET60[ET60=='FAM116B'] <- 'DENND6B'
# #ET125[ET125=='FAM46B'] <- 'TENT5B'
# ET60[ET60=='HSA011916'] <- 'CTDNEP1'
# ET60 <- ET60[!is.na(ET60)]
myTSPs <- t(combn(All$`ET-60`, 2))
colnames(myTSPs) <- c("gene1", "gene2")
################
# Load the  expression and pheno data
load('./objs/forKTSP.rda')
###################################
### Common genes
keepGns_datasets <- intersect(rownames(Expr_tcga), rownames(Expr_metabric))
keepGns_tsp <- intersect(as.vector(myTSPs), keepGns_datasets)
Expr_metabric <- Expr_metabric[keepGns_tsp, ]
Expr_tcga <- Expr_tcga[keepGns_tsp, ]
### For the TSP
myTSPs <- myTSPs[myTSPs[,1] %in% keepGns_tsp & myTSPs[,2] %in% keepGns_tsp , ]
###########################################################################
### TRAINING using restricted pairs
###########################################################################
### Set Feature number and max k
ktsp <- c(3:10) #7
featNo <- nrow(Expr_metabric)
### Train a classifier using default filtering function based on Wilcoxon
set.seed(333)
ktsp_tcga <- SWAP.Train.KTSP(
Expr_tcga, group_tcga, krange=ktsp, disjoint = T,
FilterFunc = SWAP.Filter.Wilcoxon, featureNo=featNo, RestrictedPairs = myTSPs)
ktsp_tcga
badGns <- c(ktsp_tcga$TSPs[,1])
badGns
# clean ws
rm(list = ls())
# load necessary packages
library(data.table)
library(pheatmap)
library(cmapR)
#############################
## load the ET signatures
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET60 <- All$`ET-60`[!is.na(All$`ET-60`)]
# load the ktsp signature based on ET60 in TCGA PFS
load("./objs/KTSPforCmap.rda")
###############################
ds_path <- "./data/cmap/level5_beta_trt_cp_n720216x12328.gctx"
siginfo_path <- "./data/cmap/siginfo_beta.txt"
geneinfo_path <- "./data/cmap/geneinfo_beta.txt"
# read signature annotations (corresponding to columns of level 5 matrix)
siginfo <- data.table::fread(siginfo_path)
str(siginfo)
# read the metadata: make sure we read the gene_ids as characters
geneinfo <- data.table::fread(geneinfo_path, colClasses = c("gene_id" = "character"))
# Look up the corresponding gene_id, since this will correspond to row ids in the data matrix.
goodGns_id <- geneinfo[gene_symbol %in% goodGns]$gene_id
goodGns_symbol <- geneinfo[gene_symbol %in% goodGns]$gene_symbol
badGns_id <- geneinfo[gene_symbol %in% badGns]$gene_id
badGns_symbol <- geneinfo[gene_symbol %in% badGns]$gene_symbol
# consider only those signatures marked as exemplars,
# which will ensure we get only one signature for each compound / cell line combination.
# These exemplar signatures were selected as those with the best replicate recall and are indicated by the field is_ncs_exemplar.
sigs_of_interest <- siginfo[pert_type == "trt_cp" &
cell_iname %in% c("BT20", "HCC1428", "MCF7") &
is_exemplar_sig == 1]
sig_ids <- sigs_of_interest$sig_id
length(sig_ids)
# slice out the corresponding rows and columns from the data matrix using parse_gctx,
# which will return an object of class GCT.
# This function takes arguments rid and cid which we can use to specify which rows/columns we want to extract.
ds_goodGns <- cmapR::parse_gctx(ds_path,
rid = goodGns_id,
cid = sig_ids)
ds_goodGns
ds_badGns <- cmapR::parse_gctx(ds_path,
rid = badGns_id,
cid = sig_ids)
ds_badGns
###############################################################
###############################################################
## Identify modulators
# extract the data matrix
zs_mat_goodGns <- mat(ds_goodGns)
zs_mat_badGns <- mat(ds_badGns)
# look at the z-score distributions. add vertical lines for the thresholds for modulation
hist(zs_mat_goodGns, col="dodgerblue", border="white", breaks=30, main=badGns[2], xlab="z-score")
abline(v=1, lty=2, col=2, lwd=1.3)
abline(v=-1, lty=2, col=2, lwd=1.3)
# good gns
mod_idx_goodGns <- c()
length(mod_idx_goodGns)
# good gns
mod_idx_goodGns <- c()
for (i in goodGns_id){
mod_idx_goodGns <- which(abs(zs_mat_goodGns[i, ]) > 1)
}
length(mod_idx_goodGns)
# bad gns
mod_idx_badGns <- c()
for (i in badGns_id){
mod_idx_badGns <- which(abs(zs_mat_badGns[i, ]) > 1)
}
length(mod_idx_badGns)
# good gns
non_mod_idx_goodGns <- c()
for (i in goodGns_id){
non_mod_idx_goodGns <- which(abs(zs_mat_goodGns[i, ]) < 0.15)
}
length(non_mod_idx_goodGns)
# bad gns
non_mod_idx_badGns <- c()
for (i in badGns_id){
non_mod_idx_badGns <- which(abs(zs_mat_badGns[i, ]) < 0.15)
}
length(non_mod_idx_badGns)
length(mod_idx_badGns)
#####
# Slice out the signatures from the matrix, restricting to landmark space (i.e. directly measured genes only).
lm_ids <- geneinfo[feature_space == "landmark"]$gene_id
# for good genes
ds2_goodGns <- parse_gctx(ds_path, rid=lm_ids,
cid=c(names(mod_idx_goodGns), names(non_mod_idx_goodGns)))
# for bad genes
ds2_badGns <- parse_gctx(ds_path, rid=lm_ids,
cid=c(names(mod_idx_badGns), names(non_mod_idx_badGns)))
######
# Compute all pairwise correlations between signatures.
corr_goodGns <- cor(mat(ds2_goodGns), method="spearman")
corr_badGns <- cor(mat(ds2_badGns), method="spearman")
# for good genes
mod_df_goodGns <- list()
for (i in goodGns_id){
mod_df_goodGns[[i]] <- data.frame(abs_zscore=abs(zs_mat_goodGns[i, c(mod_idx_goodGns, non_mod_idx_goodGns)]))
rownames(mod_df_goodGns[[i]]) <- c(names(mod_idx_goodGns), names(non_mod_idx_goodGns))
}
names(mod_df_goodGns) <- goodGns_symbol
View(mod_df_goodGns)
mod_df_goodGns[["LAMA5"]]
####
# for bad genes
mod_df_badGns <- list()
for (i in badGns_id){
mod_df_badGns[[i]] <- data.frame(abs_zscore=abs(zs_mat_badGns[i, c(mod_idx_badGns, non_mod_idx_badGns)]))
rownames(mod_df_badGns[[i]]) <- c(names(mod_idx_badGns), names(non_mod_idx_badGns))
}
names(mod_df_badGns) <- badGns_symbol
View(mod_df_badGns)
# look at the number of genes modulated in each class
ss_list_goodGns <- list(
mod = siginfo[sig_id %in% names(mod_idx_goodGns)]$ss_ngene,
non_mod = siginfo[sig_id %in% names(non_mod_idx_goodGns)]$ss_ngene
)
ss_list_badGns <- list(
mod = siginfo[sig_id %in% names(mod_idx_badGns)]$ss_ngene,
non_mod = siginfo[sig_id %in% names(non_mod_idx_badGns)]$ss_ngene
)
compounds_goodGns <- siginfo[sig_id %in% names(mod_idx_goodGns) &
ss_ngene <= 120 &
!grepl("^BRD-", cmap_name),
.(sig_id, pert_id, cmap_name, ss_ngene)][
order(ss_ngene, decreasing=F)]
View(compounds_goodGns)
compounds_badGns <- siginfo[sig_id %in% names(mod_idx_badGns) &
ss_ngene <= 120 &
!grepl("^BRD-", cmap_name),
.(sig_id, pert_id, cmap_name, ss_ngene)][
order(ss_ngene, decreasing=F)]
View(compounds_badGns)
write.csv(compounds_goodGns, file = './objs/compounds_goodGns.csv')
write.csv(compounds_badGns, file = './objs/cmap/compounds_badGns.csv')

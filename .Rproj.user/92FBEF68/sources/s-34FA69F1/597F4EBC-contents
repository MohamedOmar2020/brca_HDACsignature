## Clean working space
rm(list = ls())

library(survminer)
library(survival)
library(edgeR)
library(patchwork)
library(caret)
library(randomForest)
library(switchBox)
library(limma)
################
# METABRIC
Expr <- read.delim("./Data/brca_metabric/data_expression_median.txt")

Pheno <- read.delim("./Data/brca_metabric/clinical_data.tsv")

###########################
## Annotation
head(rownames(Expr))
rownames(Expr) <- Expr$Hugo_Symbol
Expr$Hugo_Symbol <- NULL
Expr$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr)))
sel <- which(apply(Expr, 1, function(x) all(is.finite(x)) ))
Expr <- Expr[sel, ]
Expr <- Expr[!is.na(rownames(Expr)),]
dim(Expr)

range(Expr)
Expr <- t(scale(t(Expr), center = TRUE, scale = TRUE))


# Expr <- as.matrix(Expr)
# ### Normalize to GAPDH
# Expr <- sweep(Expr, 2, Expr["GAPDH",],  "-")
# Expr <- Expr[ -grep("GAPDH",  rownames(Expr)), ]


####################################
### Modify the phenotype

# Pheno4
Pheno$Sample.ID <- gsub("\\-", "\\.", Pheno$Sample.ID)
rownames(Pheno) <- Pheno$Sample.ID
CommonSamples <- intersect(colnames(Expr), rownames(Pheno))
Pheno <- Pheno[CommonSamples, ]

Pheno <- Pheno[Pheno$ER.Status == "Negative", ]
Pheno <- Pheno[Pheno$PR.Status == "Negative", ]
Pheno <- Pheno[Pheno$HER2.Status == "Negative", ]


Pheno$Relapse.Free.Status <- gsub("\\:.+", "", Pheno$Relapse.Free.Status)
Pheno$relapse <- as.factor(Pheno$Relapse.Free.Status)


#Pheno$Cellularity <- as.factor(Pheno$Cellularity)
#levels(Pheno$Cellularity) <- c('Resistant', 'Sensitive', 'Sensitive')

# Keep only those who recieved chemotherapy (adjuvant)
Pheno <- Pheno[Pheno$Chemotherapy == "YES", ]

Expr <- Expr[, colnames(Expr) %in% rownames(Pheno)]
all(rownames(Pheno) == colnames(Expr))

Expr <- as.matrix(Expr)

###############################################################
## Load the signature genes

load("./Objs/ktsp_rrf.rda")

ClassifierGenes <- as.vector(KTSPfilt$TSPs)

ClassifierGenes[!(ClassifierGenes %in% rownames(Expr))]

KTSPfilt$score <- KTSPfilt$score[-4]
KTSPfilt$TSPs <- KTSPfilt$TSPs[-4, ]
KTSPfilt$tieVote <- droplevels(KTSPfilt$tieVote[-4])
KTSPfilt$name <- paste(nrow(KTSPfilt$TSPs), "TSPS")  

ClassifierGenes <- as.vector(KTSPfilt$TSPs)
############################################################
# Predict
ktspStatsTestRes <- SWAP.KTSP.Statistics(inputMat = Expr, classifier = KTSPfilt, CombineFunc = sum)

ktspPredTest <- SWAP.KTSP.Classify(Expr, KTSPfilt, DecisionFunc = function(x) sum(x) >= 2)

# For ROC and PRC curves
sscurves_metabric <- evalmod(scores = ktspStatsTestRes$statistics, labels = Pheno$relapse)
sscurves_metabric
ROC_metabric <- autoplot(sscurves_metabric, curvetype = c("ROC")) + labs(title = "Performance of signature at predicting relapse-free survival in the METABRIC dataset") + annotate("text", x = .65, y = .25, label = paste("AUC = 0.65"), size = 4)

ROC_metabric$theme$plot.title$size <- 10

pdf("./figs/survival/ROC_Metabric.pdf", width = 10, height = 10, onefile = F)
plot(ROC_metabric)
dev.off()

############################################################
## Keep only the relevant information (Metastasis Event and Time)

#table(Pheno$Relapse.Free.Status)
#Pheno$Relapse.Free.Status <- gsub("\\:.+", "", Pheno$Relapse.Free.Status)
Pheno$Event <- as.numeric(Pheno$Relapse.Free.Status)
#Pheno$OS_Event <- gsub("\\:.+", "",  Pheno$Overall.Survival.Status)
#Pheno$OS_Event <- as.numeric(Pheno$OS_Event)
table(Pheno$Event)
#table(Pheno$OS_Event)
Pheno$Time <- as.numeric(Pheno$Relapse.Free.Status..Months.)
#Pheno$OS_Time <- as.numeric(Pheno$Overall.Survival..Months.)

Phenotype <- cbind(Pheno[, c("Event", "Time")], 
                   ktspStatsTestRes$comparisons, ktspPredTest)


expr <- Expr[ClassifierGenes, ]


# create a merged pdata and Z-scores object
CoxData <- data.frame(Phenotype)

#CutPoint <- surv_cutpoint(data = CoxData, time = "Time", event = "Event", variables = "ResidualDisease_Score")
#CutPoint

#SurvData <- surv_categorize(CutPoint)

#SurvData$ResidualDisease_Score <- factor(SurvData$ResidualDisease_Score, levels = c("low", "high"))


########################################################################  
## Fit survival curves

Fit_GARS_PDCD10<- survfit(Surv(Time, Event) ~ GARS.PDCD10 , data = CoxData)
Fit_CCND1_FNDC3A <- survfit(Surv(Time, Event) ~ CCND1.FNDC3A, data = CoxData)
Fit_CMA1_PTHLH <- survfit(Surv(Time, Event) ~ CMA1.PTHLH, data = CoxData)
Fit_PCDH7_TOX <- survfit(Surv(Time, Event) ~ PCDH7.TOX, data = CoxData)

Fit_sig <- survfit(Surv(Time, Event) ~ ktspPredTest, data = CoxData)


##################################################################
##################################################################
## Plot survival curves

Plot1 <- ggsurvplot(Fit_GARS_PDCD10,
                    risk.table = FALSE,
                    pval = TRUE,
                    ggtheme = theme_minimal(),
                    risk.table.y.text.col = FALSE,
                    risk.table.y.text = FALSE, title = "GARS > PDCD10")

Plot2 <- ggsurvplot(Fit_CCND1_FNDC3A,
                    risk.table = FALSE,
                    pval = TRUE,
                    ggtheme = theme_minimal(),
                    risk.table.y.text.col = FALSE,
                    risk.table.y.text = FALSE, title = "CCND1 > FNDC3A")

Plot3 <- ggsurvplot(Fit_CMA1_PTHLH,
                    risk.table = FALSE,
                    pval = TRUE,
                    ggtheme = theme_minimal(),
                    risk.table.y.text.col = FALSE,
                    risk.table.y.text = FALSE, title = "CMA1 > PTHLH")

Plot4 <- ggsurvplot(Fit_PCDH7_TOX,
                    risk.table = FALSE,
                    pval = TRUE,
                    ggtheme = theme_minimal(),
                    risk.table.y.text.col = FALSE,
                    risk.table.y.text = FALSE, title = "PCDH7 > TOX")

pdf("./figs/survival/all4pairs_metabric.pdf", width = 8, height = 8, onefile = F)
ggsurvplot(Fit_sig,
           risk.table = FALSE,
           pval = TRUE,
           ggtheme = theme_minimal(),
           risk.table.y.text.col = FALSE,
           risk.table.y.text = FALSE, title = 'All 4 pairs')
dev.off()

PlotList <- list(Plot1, Plot2, Plot3, Plot4)
names(PlotList) <- rownames(KTSPfilt$TSPs)

Splot <- arrange_ggsurvplots(PlotList, title = "Survival plots using the signature pairs", ncol = 2, nrow = 2)
ggsave("./Figs/survival/Pairs_Metabric.pdf", Splot, width = 40, height = 30, units = "cm")

###############################################################
###############################################################
################################################################
## Plot Cox Proportional Hazard Model
CoxData$T_Stage <- as.factor(Pheno$Tumor.Stage)
levels(CoxData$T_Stage)

CoxData$Radiotherapy <- as.factor(Pheno$Radio.Therapy)
levels(CoxData$Radiotherapy)

CoxData$ChemoTherapy <- as.factor(Pheno$Chemotherapy)
levels(CoxData$ChemoTherapy)

CoxData$Age <- Pheno$Age.at.Diagnosis
#ifelse(Pheno$Age.at.Diagnosis < 50, "<50", ">=50")


CoxData$Surgery <- as.factor(Pheno$Type.of.Breast.Surgery)
levels(CoxData$Surgery) 

CoxData$Menopausal_status <- as.factor(Pheno$Inferred.Menopausal.State)
levels(CoxData$Menopausal_status) 

CoxData$Cellularity <- as.factor(Pheno$Cellularity)
levels(CoxData$Cellularity) 

CoxData$Laterality <- as.factor(Pheno$Primary.Tumor.Laterality)
levels(CoxData$Laterality) 

# CoxData$ResidualDisease_Score <- ktspStatsTestRes$statistics
# CoxData$ResidualDisease_Score <- ifelse(CoxData$ResidualDisease_Score >= 2.5, "high", "low")
# CoxData$ResidualDisease_Score <- factor(CoxData$ResidualDisease_Score, levels = c("low", "high"))
# table(CoxData$ResidualDisease_Score)

# fit multivariable Cox model 
CoxModel_indPairs <- coxph(Surv(Time, Event) ~ GARS.PDCD10+CCND1.FNDC3A+CMA1.PTHLH+PCDH7.TOX+T_Stage+Radiotherapy+Age+Surgery+Menopausal_status, data = CoxData)
CoxModel_indPairs

CoxModel_AllPairs <- coxph(Surv(Time, Event) ~ ktspPredTest+T_Stage+Radiotherapy+Age+Surgery+Menopausal_status, data = CoxData)
CoxModel_AllPairs

pdf("./Figs/survival/CoxModel_METABRIC_IndPairs.pdf", width = 10, height = 10, onefile = F)
ggforest(CoxModel_indPairs, data = CoxData)
dev.off()

pdf("./Figs/survival/CoxModel_METABRIC_Allpairs.pdf", width = 10, height = 10, onefile = F)
ggforest(CoxModel_AllPairs, data = CoxData)
dev.off()

# ## Univariate Cox model
covariates <- c("ResidualDisease_Score", "T_Stage", "Radiotherapy", "Age", "Surgery", "ChemoTherapy")
# 
univ_formulas <- sapply(covariates,
                        function(x) as.formula(paste('Surv(Time, Event)~', x)))
# 
univ_models <- lapply( univ_formulas, function(x){coxph(x, data = SurvData)})
# Extract data 
univ_results <- lapply(univ_models,
                       function(x){
                         x <- summary(x)
                         p.value<-signif(x$wald["pvalue"], digits=2)
                         wald.test<-signif(x$wald["test"], digits=2)
                         beta<-signif(x$coef[1], digits=2);#coeficient beta
                         HR <-signif(x$coef[2], digits=2);#exp(beta)
                         HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
                         HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
                         HR <- paste0(HR, " (",
                                      HR.confint.lower, "-", HR.confint.upper, ")")
                         res<-c(beta, HR, wald.test, p.value)
                         names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
                                       "p.value")
                         return(res)
                         #return(exp(cbind(coef(x),confint(x))))
                       })

res <- t(as.data.frame(univ_results, check.names = F))
as.data.frame(res)


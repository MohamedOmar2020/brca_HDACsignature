## Clean working space
rm(list = ls())

library(survminer)
library(survival)
library(patchwork)
library(readxl)

#######################
# Goal: refine the initial 125 genes to 60 genes (ET60) based on survival in the Metabric dataset

`%!in%` <- Negate(`%in%`)
################
# Load the METABRIC Expr_tcgaession and Pheno_tcgatype data
Expr_tcga <- read.delim("./Data/brca_tcga/data_mrna_seq_v2_rsem_zscores_ref_diploid_samples.txt")
Pheno_tcga <- read.delim("./Data/brca_tcga/data_clinical_patient.txt")
Pheno_tcga <- Pheno_tcga[-c(1:4), ]

#################
## get the ET125 genes
All <- read_xlsx('misc/ET-9 Selection Steps.xlsx')
ET125 <- All$`ET-125`

ET125[ET125=='GPR56'] <- 'ADGRG1'
ET125[ET125=='FAM116B'] <- 'DENND6B'
#ET125[ET125=='FAM46B'] <- 'TENT5B'
ET125[ET125=='HSA011916'] <- 'CTDNEP1'

## get the ET60 genes
ET60 <- All$`ET-60`
ET60 <- ET60[!is.na(ET60)]

x <- All$`ET-65`[!(All$`ET-65` %in% All$`ET-60`)]
###########################
## Annotation
head(rownames(Expr_tcga))
Expr_tcga <- Expr_tcga[!duplicated(Expr_tcga$Hugo_Symbol), ]
rownames(Expr_tcga) <- Expr_tcga$Hugo_Symbol
Expr_tcga$Hugo_Symbol <- NULL
Expr_tcga$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr_tcga)))
sel <- which(apply(Expr_tcga, 1, function(x) all(is.finite(x)) ))
Expr_tcga <- Expr_tcga[sel, ]
Expr_tcga <- Expr_tcga[!is.na(rownames(Expr_tcga)),]
dim(Expr_tcga)

range(Expr_tcga)
#Expr_tcga <- log2(Expr_tcga + 6)
#Expr_tcga <- t(scale(t(Expr_tcga), center = TRUE, scale = TRUE))


## subset the Expr_tcgaession to ET125 genes
Expr_tcga <- Expr_tcga[rownames(Expr_tcga) %in% ET125, ]

# fix the column names
colnames(Expr_tcga) <- gsub('\\.01', '', colnames(Expr_tcga))

####################################
### Modify the Pheno_tcgatype

Pheno_tcga$X.Patient.Identifier <- gsub("\\-", "\\.", Pheno_tcga$X.Patient.Identifier)
rownames(Pheno_tcga) <- Pheno_tcga$X.Patient.Identifier
CommonSamples <- intersect(colnames(Expr_tcga), rownames(Pheno_tcga))
Pheno_tcga <- Pheno_tcga[CommonSamples, ]

Pheno_tcga$Progression.Free.Status <- gsub("\\:.+", "", Pheno_tcga$Progression.Free.Status)
Pheno_tcga$Overall.Survival.Status <- gsub("\\:.+", "", Pheno_tcga$Overall.Survival.Status)

all(rownames(Pheno_tcga) == colnames(Expr_tcga))

Expr_tcga <- as.matrix(Expr_tcga)

############################################################
## Keep only the relevant information (Metastasis Event and Time)

#table(Pheno_tcga$Relapse.Free.Status)
#Pheno_tcga$Relapse.Free.Status <- gsub("\\:.+", "", Pheno_tcga$Relapse.Free.Status)
Pheno_tcga$Progression.Free.Status <- as.numeric(Pheno_tcga$Progression.Free.Status)
Pheno_tcga$Overall.Survival.Status <- as.numeric(Pheno_tcga$Overall.Survival.Status)

table(Pheno_tcga$Progression.Free.Status)
table(Pheno_tcga$Overall.Survival.Status)

Pheno_tcga$Progress.Free.Survival..Months. <- as.numeric(Pheno_tcga$Progress.Free.Survival..Months.)
Pheno_tcga$Overall.Survival..Months. <- as.numeric(Pheno_tcga$Overall.Survival..Months.)

Phenotype <- cbind(Pheno_tcga[, c("Progression.Free.Status", "Progress.Free.Survival..Months.", "Overall.Survival.Status", "Overall.Survival..Months.")])

# create a merged pdata and Z-scores object
SurvData_Genes_cbioportal <- data.frame(Phenotype, t(Expr_tcga))

#################################################################################
## Workon on the ET124 genes

ET125 <- intersect(All$`ET-125`, rownames(Expr_tcga))
#ET125 <- sort(ET125, decreasing = T)
ET60 <- intersect(All$`ET-60`, rownames(Expr_tcga))

# ======================
## categorize the Expression values into altered and non-altered
list_of_genes <- list()
temp_ET <- ET125
for (x in seq_along(temp_ET)){
  #list_of_genes[[x]] <- sample(temp_ET, size = length(temp_ET)-1,replace = FALSE)
  list_of_genes[[x]] <- temp_ET[-length(temp_ET)]
  temp_ET <- list_of_genes[[x]] 
}


###############################################
# gene_list <- list()
# combo_list <- list()
# for (i in 1:length(ET60)){
#   missing_gene <- ET60[i]
#   missing_gene
#   gene_list[[i]] <- list()
#   combo_list[[i]] <- list()
#   names(gene_list)[i] <- missing_gene
#   names(combo_list)[i] <- missing_gene
#   for (j in 1:(length(ET60)-1)){
#     loop_length <- length(ET60)-j
#     combs <- combn(x = ET60, m = loop_length)
#     combos <- as.list(data.frame(combs))
#     combos
#     combos_missing_gene <- combos[unlist(lapply(combos, function(x) !any(missing_gene %in% x)))]
#     gene_list[[i]][j] <- list(combos_missing_gene)
#   }
#   combo_list[[i]] <- unlist(gene_list[[i]],recursive = F)
# }
#################################################

list_of_genes <- list_of_genes[-c(120, 121)]

surv_res <- lapply(list_of_genes, function(x){
  
  # subset
  #temp <- SurvData_Genes_cbioportal[, c(5:length(colnames(SurvData_Genes_cbioportal)))]
  temp <- SurvData_Genes_cbioportal[, x]

  # convert each gene value to altered vs non-altered based on the expression
  for (g in seq_along(colnames(temp))){
    temp[, g] <- ifelse(temp[, g] > -2 & temp[, g] < 2, 'non-altered', 'altered')
  }
  
  
  temp$status <- rep(NA, length(rownames(temp)))
  

  # calculate the sample alteration status
  for (i in seq_along(rownames(temp))){
    temp$status[i] <- ifelse(any(temp[i, ] %in% 'altered'), 'altered', 'non-altered')
  }


  # re-add the survival info
  temp$Progress.Free.Survival..Months. <- SurvData_Genes_cbioportal$Progress.Free.Survival..Months.
  temp$Progression.Free.Status <- SurvData_Genes_cbioportal$Progression.Free.Status
  
  # calculate survival
  Fit <- surv_fit(Surv(Progress.Free.Survival..Months., Progression.Free.Status) ~ status, data = temp)
  # get the logrank p-value
  Pval <- surv_pvalue(Fit)
  Pval <- Pval$pval
  #temp$Pval <- Pval
  #temp
  
  # store the results in a dataframe
  temp_res <- list(
     num_genes = ncol(temp)-3,
     gene_names = paste(colnames(temp)[1:(length(colnames(temp))-3)], sep = ', '),
     pvalue = Pval
     )
   
   temp_res
   
})

surv_df <- do.call(rbind, surv_res)

ET76 <- c("ABTB1", "BCAS4", "CCDC69", "CROCC", "DKK3", "EPHB3", "FCHO1", "GDPD5", "IGFBP5", "MAP6", "PLA2G6", "RABGGTA", "SHKBP1", "TMEM53", "CSK", "CYP2S1", "DEF6", "ENO3", "FZD2", "HDAC11", "ID3", "IER5L", "LAMA5", "NAB2", "PREX1", "PRPF40B", "S100A6", "SHC1", "SNPH", "THBS1", "WNT10A", "CACNG4", "CUX1", "CX3CL1", "ECH1", "FIBCD1", "KRT7", "LIMK2", "LOXL1", "MYO1B", "PCDH1", "PDLIM1", "SCNN1A", "SUSD2", "BNIPL", "BOC", "CCND2", "CPA4", "FAM46B", "FGF1", "IL6", "LOXL2", "LRP1", "MB", "MGAT1", "VIPR1", "XPC",  "ABCC2", "ABCC3", "ACSF2", "ANK1", "AZIN2", "B3GAT3", "BAD", "CARD14", "CCDC106", "CDC42EP3", "CERS4", "CHCHD6", "CLIC1", "CLIP2", "COL1A1", "COL5A1", "COQ8B", "CTSH", "DBP")


x <- intersect(ET76, All$`ET-9`)

#################################################################################
## Workon on the ET76 genes
ET76 <- c("ABTB1", "BCAS4", "CCDC69", "CROCC", "DKK3", "EPHB3", "FCHO1", "GDPD5", "IGFBP5", "MAP6", "PLA2G6", "RABGGTA", "SHKBP1", "TMEM53", "CSK", "CYP2S1", "DEF6", "ENO3", "FZD2", "HDAC11", "ID3", "IER5L", "LAMA5", "NAB2", "PREX1", "PRPF40B", "S100A6", "SHC1", "SNPH", "THBS1", "WNT10A", "CACNG4", "CUX1", "CX3CL1", "ECH1", "FIBCD1", "KRT7", "LIMK2", "LOXL1", "MYO1B", "PCDH1", "PDLIM1", "SCNN1A", "SUSD2", "BNIPL", "BOC", "CCND2", "CPA4", "FAM46B", "FGF1", "IL6", "LOXL2", "LRP1", "MB", "MGAT1", "VIPR1", "XPC",  "ABCC2", "ABCC3", "ACSF2", "ANK1", "AZIN2", "B3GAT3", "BAD", "CARD14", "CCDC106", "CDC42EP3", "CERS4", "CHCHD6", "CLIC1", "CLIP2", "COL1A1", "COL5A1", "COQ8B", "CTSH", "DBP")

# ======================
## categorize the Expr_tcgaession values into altered and non-altered
list_of_genes <- list()
temp_ET <- ET76
for (x in seq_along(temp_ET)){
  #list_of_genes[[x]] <- sample(temp_ET, size = length(temp_ET)-1,replace = FALSE)
  list_of_genes[[x]] <- temp_ET[-length(temp_ET)]
  temp_ET <- list_of_genes[[x]] 
}

list_of_genes <- list_of_genes[-c(75, 76)]

surv_res_ET76 <- lapply(list_of_genes, function(x){
  
  # subset
  temp <- SurvData_Genes_cbioportal[, ET76]
  temp <- temp[, x]
  
  # convert each gene value to altered vs non-altered based on the expression
  for (g in seq_along(colnames(temp))){
    temp[, g] <- ifelse(temp[, g] > -2 & temp[, g] < 2, 'non-altered', 'altered')
  }
  
  
  temp$status <- rep(NA, length(rownames(temp)))
  
  
  # calculate the sample alteration status
  for (i in seq_along(rownames(temp))){
    temp$status[i] <- ifelse(any(temp[i, ] %in% 'altered'), 'altered', 'non-altered')
  }
  
  
  # re-add the survival info
  temp$Progress.Free.Survival..Months. <- SurvData_Genes_cbioportal$Progress.Free.Survival..Months.
  temp$Progression.Free.Status <- SurvData_Genes_cbioportal$Progression.Free.Status
  
  # calculate survival
  Fit <- surv_fit(Surv(Progress.Free.Survival..Months., Progression.Free.Status) ~ status, data = temp)
  # get the logrank p-value
  Pval <- surv_pvalue(Fit)
  Pval <- Pval$pval
  #temp$Pval <- Pval
  #temp
  
  # store the results in a dataframe
  temp_res <- list(
    num_genes = ncol(temp)-3,
    gene_names = paste(colnames(temp)[1:(length(colnames(temp))-3)], sep = ', '),
    pvalue = Pval
  )
  
  temp_res
  
})

surv_df_ET76 <- do.call(rbind, surv_res_ET76)


#ET60 <- c("ABTB1", "BCAS4", "CCDC69", "CROCC", "DKK3", "EPHB3", "FCHO1", "GDPD5", "IGFBP5", "MAP6", "PLA2G6", "RABGGTA", "SHKBP1", "TMEM53", "CSK", "CYP2S1", "DEF6", "ENO3", "FZD2", "HDAC11", "ID3", "IER5L", "LAMA5", "NAB2", "PREX1", "PRPF40B", "S100A6", "SHC1", "SNPH", "THBS1", "WNT10A", "CACNG4", "CUX1", "CX3CL1", "ECH1", "FIBCD1", "KRT7", "LIMK2", "LOXL1", "MYO1B", "PCDH1", "PDLIM1", "SCNN1A", "SUSD2", "BNIPL", "BOC", "CCND2", "CPA4", "FAM46B", "FGF1", "IL6", "LOXL2", "LRP1", "MB", "MGAT1", "VIPR1", "XPC",  "ABCC2", "ABCC3", "ACSF2")
ET58 <- c("ABTB1", "BCAS4", "CCDC69", "CROCC", "DKK3", "EPHB3", "FCHO1", "GDPD5", "IGFBP5", "MAP6", "PLA2G6", "RABGGTA", "SHKBP1", "TMEM53", "CSK", "CYP2S1", "DEF6", "ENO3", "FZD2", "HDAC11", "ID3", "IER5L", "LAMA5", "NAB2", "PREX1", "PRPF40B", "S100A6", "SHC1", "SNPH", "THBS1", "WNT10A", "CACNG4", "CUX1", "CX3CL1", "ECH1", "FIBCD1", "KRT7", "LIMK2", "LOXL1", "MYO1B", "PCDH1", "PDLIM1", "SCNN1A", "SUSD2", "BNIPL", "BOC", "CCND2", "CPA4", "FAM46B", "FGF1", "IL6", "LOXL2", "LRP1", "MB", "MGAT1", "VIPR1", "XPC",  "ABCC2")
x <- intersect(ET58, All$`ET-9`)


########################################################################  
#################################################################################
## Workon on the ET58 genes
ET58 <- c("ABTB1", "BCAS4", "CCDC69", "CROCC", "DKK3", "EPHB3", "FCHO1", "GDPD5", "IGFBP5", "MAP6", "PLA2G6", "RABGGTA", "SHKBP1", "TMEM53", "CSK", "CYP2S1", "DEF6", "ENO3", "FZD2", "HDAC11", "ID3", "IER5L", "LAMA5", "NAB2", "PREX1", "PRPF40B", "S100A6", "SHC1", "SNPH", "THBS1", "WNT10A", "CACNG4", "CUX1", "CX3CL1", "ECH1", "FIBCD1", "KRT7", "LIMK2", "LOXL1", "MYO1B", "PCDH1", "PDLIM1", "SCNN1A", "SUSD2", "BNIPL", "BOC", "CCND2", "CPA4", "FAM46B", "FGF1", "IL6", "LOXL2", "LRP1", "MB", "MGAT1", "VIPR1", "XPC",  "ABCC2")

# ======================
## categorize the Expr_tcgaession values into altered and non-altered
list_of_genes <- list()
temp_ET <- ET58
for (x in seq_along(temp_ET)){
  #list_of_genes[[x]] <- sample(temp_ET, size = length(temp_ET)-1,replace = FALSE)
  list_of_genes[[x]] <- temp_ET[-length(temp_ET)]
  temp_ET <- list_of_genes[[x]] 
}

list_of_genes <- list_of_genes[-c(57, 58)]

surv_res_ET58 <- lapply(list_of_genes, function(x){
  
  # subset
  temp <- SurvData_Genes_cbioportal[, x]
  #temp <- temp[, x]
  
  # convert each gene value to altered vs non-altered based on the expression
  for (g in seq_along(colnames(temp))){
    temp[, g] <- ifelse(temp[, g] > -2 & temp[, g] < 2, 'non-altered', 'altered')
  }
  
  
  temp$status <- rep(NA, length(rownames(temp)))
  
  
  # calculate the sample alteration status
  for (i in seq_along(rownames(temp))){
    temp$status[i] <- ifelse(any(temp[i, ] %in% 'altered'), 'altered', 'non-altered')
  }
  
  
  # re-add the survival info
  temp$Progress.Free.Survival..Months. <- SurvData_Genes_cbioportal$Progress.Free.Survival..Months.
  temp$Progression.Free.Status <- SurvData_Genes_cbioportal$Progression.Free.Status
  
  # calculate survival
  Fit <- surv_fit(Surv(Progress.Free.Survival..Months., Progression.Free.Status) ~ status, data = temp)
  # get the logrank p-value
  Pval <- surv_pvalue(Fit)
  Pval <- Pval$pval
  #temp$Pval <- Pval
  #temp
  
  # store the results in a dataframe
  temp_res <- list(
    num_genes = ncol(temp)-3,
    gene_names = paste(colnames(temp)[1:(length(colnames(temp))-3)], sep = ', '),
    pvalue = Pval
  )
  
  temp_res
  
})

surv_df_ET58 <- do.call(rbind, surv_res_ET58)


ET36 <- c("ABTB1", "BCAS4", "CCDC69", "CROCC", "DKK3", "EPHB3", "FCHO1", "GDPD5", "IGFBP5", "MAP6", "PLA2G6", "RABGGTA", "SHKBP1", "TMEM53", "CSK", "CYP2S1", "DEF6", "ENO3", "FZD2", "HDAC11", "ID3", "IER5L", "LAMA5", "NAB2", "PREX1", "PRPF40B", "S100A6", "SHC1", "SNPH", "THBS1", "WNT10A", "CACNG4", "CUX1", "CX3CL1", "ECH1", "FIBCD1")

x <- intersect(ET36, All$`ET-60`)


#################################################################################
## Workon on the ET36 genes
ET36 <- c("ABTB1", "BCAS4", "CCDC69", "CROCC", "DKK3", "EPHB3", "FCHO1", "GDPD5", "IGFBP5", "MAP6", "PLA2G6", "RABGGTA", "SHKBP1", "TMEM53", "CSK", "CYP2S1", "DEF6", "ENO3", "FZD2", "HDAC11", "ID3", "IER5L", "LAMA5", "NAB2", "PREX1", "PRPF40B", "S100A6", "SHC1", "SNPH", "THBS1", "WNT10A", "CACNG4", "CUX1", "CX3CL1", "ECH1", "FIBCD1")
ET36 <- ET36[order(ET36, decreasing = T)]
# ======================
## categorize the Expression values into altered and non-altered
list_of_genes <- list()
temp_ET <- ET36
for (x in seq_along(temp_ET)){
  #list_of_genes[[x]] <- sample(temp_ET, size = length(temp_ET)-1,replace = FALSE)
  list_of_genes[[x]] <- temp_ET[-length(temp_ET)]
  temp_ET <- list_of_genes[[x]] 
}

list_of_genes <- list_of_genes[-c(35, 36)]

surv_res_ET36 <- lapply(list_of_genes, function(x){
  
  # subset
  temp <- SurvData_Genes_cbioportal[, ET36]
  temp <- temp[, x]
  
  # convert each gene value to altered vs non-altered based on the expression
  for (g in seq_along(colnames(temp))){
    temp[, g] <- ifelse(temp[, g] > -2 & temp[, g] < 2, 'non-altered', 'altered')
  }
  
  
  temp$status <- rep(NA, length(rownames(temp)))
  
  
  # calculate the sample alteration status
  for (i in seq_along(rownames(temp))){
    temp$status[i] <- ifelse(any(temp[i, ] %in% 'altered'), 'altered', 'non-altered')
  }
  
  
  # re-add the survival info
  temp$Progress.Free.Survival..Months. <- SurvData_Genes_cbioportal$Progress.Free.Survival..Months.
  temp$Progression.Free.Status <- SurvData_Genes_cbioportal$Progression.Free.Status
  
  # calculate survival
  Fit <- surv_fit(Surv(Progress.Free.Survival..Months., Progression.Free.Status) ~ status, data = temp)
  # get the logrank p-value
  Pval <- surv_pvalue(Fit)
  Pval <- Pval$pval
  #temp$Pval <- Pval
  #temp
  
  # store the results in a dataframe
  temp_res <- list(
    num_genes = ncol(temp)-3,
    gene_names = paste(colnames(temp)[1:(length(colnames(temp))-3)], sep = ', '),
    pvalue = Pval
  )
  
  temp_res
  
})

surv_df_ET36 <- do.call(rbind, surv_res_ET36)


ET32 <- c("ABTB1", "BCAS4", "CCDC69", "CROCC", "DKK3", "EPHB3", "FCHO1", "GDPD5", "IGFBP5", "MAP6", "PLA2G6", "RABGGTA", "SHKBP1", "TMEM53", "CSK", "CYP2S1", "DEF6", "ENO3", "FZD2", "HDAC11", "ID3", "IER5L", "LAMA5", "NAB2", "PREX1", "PRPF40B", "S100A6", "SHC1", "SNPH", "THBS1", "WNT10A", "CACNG4")
ET27 <- c("WNT10A", "TMEM53", "THBS1", "SNPH", "SHKBP1", "SHC1", "S100A6", "RABGGTA", "PRPF40B", "PREX1", "PLA2G6", "NAB2", "MAP6", "LAMA5", "IGFBP5", "IER5L", "ID3", "HDAC11", "GDPD5", "FZD2", "FIBCD1", "FCHO1", "EPHB3", "ENO3", "ECH1", "DKK3", "DEF6")

x <- intersect(ET27, All$`ET-9`)

#################################################################################
## Workon on the ET45 genes
ET45 <- c("ABTB1", "BCAS4", "CCDC69", "CROCC", "DKK3", "EPHB3", "FCHO1", "GDPD5", "IGFBP5", "MAP6", "PLA2G6", "RABGGTA", "SHKBP1", "TMEM53", "CSK", "CYP2S1", "DEF6", "ENO3", "FZD2", "HDAC11", "ID3", "IER5L", "LAMA5", "NAB2", "PREX1", "PRPF40B", "S100A6", "SHC1", "SNPH", "THBS1", "WNT10A", "CACNG4", "CUX1", "CX3CL1", "ECH1", "FIBCD1", "KRT7", "LIMK2", "LOXL1", "MYO1B", "PCDH1", "PDLIM1", "SCNN1A", "SUSD2", "BNIPL")

# ======================
## categorize the Expr_tcgaession values into altered and non-altered
list_of_genes <- list()
temp_ET <- ET45
for (x in seq_along(temp_ET)){
  #list_of_genes[[x]] <- sample(temp_ET, size = length(temp_ET)-1,replace = FALSE)
  list_of_genes[[x]] <- temp_ET[-length(temp_ET)]
  temp_ET <- list_of_genes[[x]] 
}

list_of_genes <- list_of_genes[-c(44, 45)]

surv_res_ET45 <- lapply(list_of_genes, function(x){
  
  # subset
  temp <- SurvData_Genes_cbioportal[, ET45]
  temp <- temp[, x]
  
  # convert each gene value to altered vs non-altered based on the expression
  for (g in seq_along(colnames(temp))){
    temp[, g] <- ifelse(temp[, g] > -2 & temp[, g] < 2, 'non-altered', 'altered')
  }
  
  
  temp$status <- rep(NA, length(rownames(temp)))
  
  
  # calculate the sample alteration status
  for (i in seq_along(rownames(temp))){
    temp$status[i] <- ifelse(any(temp[i, ] %in% 'altered'), 'altered', 'non-altered')
  }
  
  
  # re-add the survival info
  temp$Progress.Free.Survival..Months. <- SurvData_Genes_cbioportal$Progress.Free.Survival..Months.
  temp$Progression.Free.Status <- SurvData_Genes_cbioportal$Progression.Free.Status
  
  # calculate survival
  Fit <- surv_fit(Surv(Progress.Free.Survival..Months., Progression.Free.Status) ~ status, data = temp)
  # get the logrank p-value
  Pval <- surv_pvalue(Fit)
  Pval <- Pval$pval
  #temp$Pval <- Pval
  #temp
  
  # store the results in a dataframe
  temp_res <- list(
    num_genes = ncol(temp)-3,
    gene_names = paste(colnames(temp)[1:(length(colnames(temp))-3)], sep = ', '),
    pvalue = Pval
  )
  
  temp_res
  
})

surv_df_ET45 <- do.call(rbind, surv_res_ET45)


ET40 <- c("ABTB1", "BCAS4", "CCDC69", "CROCC", "DKK3", "EPHB3", "FCHO1", "GDPD5", "IGFBP5", "MAP6", "PLA2G6", "RABGGTA", "SHKBP1", "TMEM53", "CSK", "CYP2S1", "DEF6", "ENO3", "FZD2", "HDAC11", "ID3", "IER5L", "LAMA5", "NAB2", "PREX1", "PRPF40B", "S100A6", "SHC1", "SNPH", "THBS1", "WNT10A", "CACNG4", "CUX1", "CX3CL1", "ECH1", "FIBCD1", "KRT7", "LIMK2", "LOXL1", "MYO1B")

x <- intersect(ET40, All$`ET-9`)






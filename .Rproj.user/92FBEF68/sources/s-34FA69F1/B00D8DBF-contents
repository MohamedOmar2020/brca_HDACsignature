## Clean working space
rm(list = ls())

library(survminer)
library(survival)
library(patchwork)
library(readxl)

#######################
# Goal: test the ET7 signature on the Metabric dataset

#################
## get the ET signatures
load("./objs/ET.rda")

################
# Load the METABRIC Expr_metabricession and Pheno_metabrictype data
Expr_metabric <- read.delim("./Data/brca_metabric_cbioportal/data_mrna_agilent_microarray_zscores_ref_diploid_samples.txt")
Pheno_metabric <- read.delim("./Data/brca_metabric_cbioportal/brca_metabric_clinical_data.tsv")

###########################
## Annotation
head(rownames(Expr_metabric))
Expr_metabric <- Expr_metabric[!duplicated(Expr_metabric$Hugo_Symbol), ]
rownames(Expr_metabric) <- Expr_metabric$Hugo_Symbol
Expr_metabric$Hugo_Symbol <- NULL
Expr_metabric$Entrez_Gene_Id <- NULL
summary(is.na(rownames(Expr_metabric)))
sel <- which(apply(Expr_metabric, 1, function(x) all(is.finite(x)) ))
Expr_metabric <- Expr_metabric[sel, ]
Expr_metabric <- Expr_metabric[!is.na(rownames(Expr_metabric)),]
dim(Expr_metabric)

range(Expr_metabric)
x <- intersect(ET7, rownames(Expr_metabric))
#Expr_metabric <- t(scale(t(Expr_metabric), center = TRUE, scale = TRUE))

## subset the Expr_metabricession to ET125 genes
#Expr_metabric <- Expr_metabric[rownames(Expr_metabric) %in% ET7, ]

#`%!in%` <- Negate(`%in%`)
#missingET7<- ET7[ET7 %!in% rownames(Expr_metabric)]


# GPR56
####################################
### Modify the Pheno_metabric

Pheno_metabric$Sample.ID <- gsub("\\-", "\\.", Pheno_metabric$Sample.ID)
rownames(Pheno_metabric) <- Pheno_metabric$Sample.ID
CommonSamples <- intersect(colnames(Expr_metabric), rownames(Pheno_metabric))
Pheno_metabric <- Pheno_metabric[CommonSamples, ]

Pheno_metabric$Relapse.Free.Status <- gsub("\\:.+", "", Pheno_metabric$Relapse.Free.Status)
Pheno_metabric$Overall.Survival.Status <- gsub("\\:.+", "", Pheno_metabric$Overall.Survival.Status)

all(rownames(Pheno_metabric) == colnames(Expr_metabric))

Expr_metabric <- as.matrix(Expr_metabric)


############################################################
## Keep only the relevant information (Metastasis Event and Time)

#table(Pheno_metabric$Relapse.Free.Status)
#Pheno_metabric$Relapse.Free.Status <- gsub("\\:.+", "", Pheno_metabric$Relapse.Free.Status)
Pheno_metabric$Relapse.Free.Status <- as.numeric(Pheno_metabric$Relapse.Free.Status)
Pheno_metabric$Overall.Survival.Status <- as.numeric(Pheno_metabric$Overall.Survival.Status)

table(Pheno_metabric$Relapse.Free.Status)
table(Pheno_metabric$Overall.Survival.Status)

Pheno_metabric$Relapse.Free.Status..Months. <- as.numeric(Pheno_metabric$Relapse.Free.Status..Months.)
Pheno_metabric$Overall.Survival..Months. <- as.numeric(Pheno_metabric$Overall.Survival..Months.)

Phenotype<- cbind(Pheno_metabric[, c("Relapse.Free.Status", "Relapse.Free.Status..Months.", "Overall.Survival.Status", "Overall.Survival..Months.")])


# create a merged pdata and Z-scores object
SurvData_Genes_cbioportal <- data.frame(Phenotype, t(Expr_metabric))




# subset
temp <- SurvData_Genes_cbioportal[, ET25]
  
# convert each gene value to altered vs non-altered based on the expression
for (g in seq_along(colnames(temp))){
  temp[, g] <- ifelse(temp[, g] > -2 & temp[, g] < 2, 'non-altered', 'altered')
}
  
  
temp$status <- rep(NA, length(rownames(temp)))
  
  
# calculate the sample alteration status
for (i in seq_along(rownames(temp))){
  temp$status[i] <- ifelse(any(temp[i, ] %in% 'altered'), 'altered', 'non-altered')
}
  
# re-add the survival info
SurvData <- temp   
SurvData$Overall.Survival..Months. <- SurvData_Genes_cbioportal$Overall.Survival..Months.
SurvData$Overall.Survival.Status <- SurvData_Genes_cbioportal$Overall.Survival.Status
  
# calculate survival
Fit <- surv_fit(Surv(Overall.Survival..Months., Overall.Survival.Status) ~ status, data = SurvData)
# get the logrank p-value
Pval <- surv_pvalue(Fit)
Pval <- Pval$pval

ggsurvplot(Fit)









